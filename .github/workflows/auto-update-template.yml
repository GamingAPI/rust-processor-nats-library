name: Auto update generated client
on:
  workflow_dispatch:
  schedule:
    - cron:  '0 0 * * *'

  # Allows external webhook trigger
  repository_dispatch:
    types:
      - webhook
env:
  library_last_version: 0.0.0
  template_last_version: 0.0.0
  template_current_version: 0.0.0
  document_last_version: 0.0.0
  document_current_version: 0.0.0
  major_template_last_version: 0
  minor_template_last_version: 0
  patch_template_last_version: 0
  major_template_current_version: 0
  minor_template_current_version: 0
  patch_template_current_version: 0
  major_version_change: false
  minor_version_change: false
  patch_version_change: false
  commit_message: ""
jobs:
  get-template-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # Find all relevant semver versions needed to figure out how to update the client
      - name: Fetch the last AsyncAPI document version that generated the client
        run: echo "document_last_version=$(cat ./configs.json | jq -r '.document_last_version')" >> $GITHUB_ENV
      - name: Fetch the last template version that generated the client
        run: echo "template_last_version=$(cat ./configs.json | jq -r '.template_last_version')" >> $GITHUB_ENV
      - name: Fetch the last library version
        run: echo "library_last_version=$(cat ./package.json | jq -r '.version')" >> $GITHUB_ENV
      - name: Fetch current template version
        run: echo "template_current_version=$(curl -sL https://api.github.com/repos/asyncapi/ts-nats-template/releases/latest | jq -r '.tag_name' | sed 's/v//')" >> $GITHUB_ENV
      - name: Get all the application AsyncAPI documents
        uses: actions/checkout@v2  
        with:
          repository: GamingEventAPI/definitions
          token: ${{ secrets.READ_TOKEN }}
          path: "./definitions"
      - name: Get the version of the API
        run: echo "document_current_version=$(cat ./definitions/rust_processor.json | jq -r '.info.version' | sed 's/v//')" >> $GITHUB_ENV
      
      # Figure out how the template version have changed
      - run: semver_template_last_version=( ${template_last_version//./ } ) && major_template_last_version=${semver_template_last_version[0]} && echo "major_template_last_version=$major_template_last_version" >> $GITHUB_ENV
      - run: semver_template_last_version=( ${template_last_version//./ } ) && minor_template_last_version=${semver_template_last_version[1]} && echo "minor_template_last_version=$minor_template_last_version" >> $GITHUB_ENV
      - run: semver_template_last_version=( ${template_last_version//./ } ) && patch_template_last_version=${semver_template_last_version[2]} && echo "patch_template_last_version=$patch_template_last_version" >> $GITHUB_ENV
      - run: semver_template_current_version=( ${template_current_version//./ } ) && major_template_current_version=${semver_template_current_version[0]} && echo "major_template_current_version=$major_template_current_version" >> $GITHUB_ENV
      - run: semver_template_current_version=( ${template_current_version//./ } ) && minor_template_current_version=${semver_template_current_version[1]} && echo "minor_template_current_version=$minor_template_current_version" >> $GITHUB_ENV
      - run: semver_template_current_version=( ${template_current_version//./ } ) && patch_template_current_version=${semver_template_current_version[2]} && echo "patch_template_current_version=$patch_template_current_version" >> $GITHUB_ENV
      - if: ${{ env.major_template_current_version > env.major_template_last_version }}
        run: echo "major_version_change=true" >> $GITHUB_ENV && echo "commit_message=${commit_message}Template have changed to a new major version." >> $GITHUB_ENV
      - if: ${{ env.minor_template_current_version > env.minor_template_last_version }}
        run: echo "minor_version_change=true" >> $GITHUB_ENV && echo "commit_message=${commit_message}Template have changed to a new minor version." >> $GITHUB_ENV
      - if: ${{ env.patch_template_current_version > env.patch_template_last_version }}
        run: echo "patch_version_change=true" >> $GITHUB_ENV && echo "commit_message=${commit_message}Template have changed to a new patch version." >> $GITHUB_ENV

      # Figure out how the AsyncAPI document have changed
      - run: semver_document_last_version=( ${document_last_version//./ } ) && major_document_last_version=${semver_document_last_version[0]} && echo "major_document_last_version=$major_document_last_version" >> $GITHUB_ENV
      - run: semver_document_last_version=( ${document_last_version//./ } ) && minor_document_last_version=${semver_document_last_version[1]} && echo "minor_document_last_version=$minor_document_last_version" >> $GITHUB_ENV
      - run: semver_document_last_version=( ${document_last_version//./ } ) && patch_document_last_version=${semver_document_last_version[2]} && echo "patch_document_last_version=$patch_document_last_version" >> $GITHUB_ENV
      - run: semver_document_current_version=( ${document_current_version//./ } ) && major_document_current_version=${semver_document_current_version[0]} && echo "major_document_current_version=$major_document_current_version" >> $GITHUB_ENV
      - run: semver_document_current_version=( ${document_current_version//./ } ) && minor_document_current_version=${semver_document_current_version[1]} && echo "minor_document_current_version=$minor_document_current_version" >> $GITHUB_ENV
      - run: semver_document_current_version=( ${document_current_version//./ } ) && patch_document_current_version=${semver_document_current_version[2]} && echo "patch_document_current_version=$patch_document_current_version" >> $GITHUB_ENV
      - if: ${{ env.major_document_current_version > env.major_document_last_version }}
        run: echo "major_version_change=true" >> $GITHUB_ENV && echo "commit_message=${commit_message}AsyncAPI document have changed to a new major version. " >> $GITHUB_ENV
      - if: ${{ env.minor_document_current_version > env.minor_document_last_version && env.major_document_current_version < env.major_document_last_version }}
        run: echo "minor_version_change=true" >> $GITHUB_ENV && echo "commit_message=${commit_message}AsyncAPI document have changed to a new minor version. " >> $GITHUB_ENV
      - if: ${{ env.patch_document_current_version > env.patch_document_last_version && env.minor_document_current_version < env.minor_document_last_version && env.major_document_current_version < env.major_document_last_version }}
        run: echo "patch_version_change=true" >> $GITHUB_ENV && echo "commit_message=${commit_message}AsyncAPI document have changed to a new patch template version. " >> $GITHUB_ENV

      # Make changes to the client code if needed
      - name: Remove previous files to ensure clean slate
        if: ${{env.major_version_change == 'true' || env.minor_version_change == 'true' || env.patch_version_change == 'true'}}
        run: find . -not \( -name configs.json -or -name custom_package.json -or -iwholename *.github* -or -iwholename *./definitions* -or -iwholename *.git* -or -name . \) -exec echo {} +
      - name: Generating client from the AsyncAPI document
        if: ${{env.major_version_change == 'true' || env.minor_version_change == 'true' || env.patch_version_change == 'true'}}
        uses: docker://asyncapi/github-action-for-generator:2.0.0
        with:
          template: '@asyncapi/ts-nats-template'
          filepath: ./definitions/rust_processor.json
          output: ./
      - name: Write new config file to ensure we keep the new state for next time
        if: ${{env.major_version_change == 'true' || env.minor_version_change == 'true' || env.patch_version_change == 'true'}}
        run: cat ./configs.json | jq '.' | .template_last_version = $template_last_version | .document_current_version = $document_current_version > ./configs.json
      - name: Write old version to package.json file as it was cleared by the generator
        if: ${{env.major_version_change == 'true' || env.minor_version_change == 'true' || env.patch_version_change == 'true'}}
        run: cat ./package.json | jq '.' | .version = $library_last_version > ./package.json
      - name: Merge custom package file with template generated
        if: ${{env.major_version_change == 'true' || env.minor_version_change == 'true' || env.patch_version_change == 'true'}}
        run: jq -s '.[0] * .[1]' ./package.json ./custom_package.json > ./package.json

      # Clean up from code generation
      - name: Remove excess files
        if: ${{env.major_version_change == 'true' || env.minor_version_change == 'true' || env.patch_version_change == 'true'}}
        run: rm -rf ./definitions

      # Follow conventional commit for PR's to ensure accurate updates
      - name: Create Pull Request for major version if needed
        if: ${{env.major_version_change == 'true'}}
        uses: peter-evans/create-pull-request@v3
        with:
          title: "feat!: auto update"
          committer: jonaslagoni <jonas-lt@live.dk>
          author: jonaslagoni <jonas-lt@live.dk>
          delete-branch: true
          commit-message: ${{env.commit_message}}. \n\n Library require a new major version change.
          body: ${{env.commit_message}}. \n\n Library require a new major version change.
      - name: Create Pull Request for minor version if needed
        if: ${{env.minor_version_change == 'true'}}
        uses: peter-evans/create-pull-request@v3
        with:
          title: "feat: auto update"
          committer: jonaslagoni <jonas-lt@live.dk>
          author: jonaslagoni <jonas-lt@live.dk>
          delete-branch: true
          commit-message: ${{env.commit_message}}. \n\n Library require a new major version change.
          body: ${{env.commit_message}}. \n\n Library require a new minor version change.
      - name: Create Pull Request for patch version if needed
        if: ${{env.patch_version_change == 'true'}}
        uses: peter-evans/create-pull-request@v3
        with:
          title: "fix: auto update"
          committer: jonaslagoni <jonas-lt@live.dk>
          author: jonaslagoni <jonas-lt@live.dk>
          delete-branch: true
          commit-message: ${{env.commit_message}}. \n\n Library require a new major version change.
          body: ${{env.commit_message}}. \n\n Library require a new patch version change.
